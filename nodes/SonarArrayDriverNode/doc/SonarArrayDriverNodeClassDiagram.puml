@startuml
title Sonar Array Driver Node Class Diagram
package ros {
  class Publisher
}
package eros {
  class BaseNode
  class BaseNodeProcess
}
package sensor_msgs {
    class Range <<(M,#FFFF00)>>
}
package sonar_array {
  class SonarArrayDriverNode <<ROS>> #Orange {
      +const std::string BASE_NODE_NAME
      +const uint16_t MAJOR_RELEASE_VERSION
      +const uint16_t MINOR_RELEASE_VERSION
      +const uint16_t BUILD_NUMBER
      +const std::string FIRMWARE_DESCRIPTION
      +const eros::System::MainSystem DIAGNOSTIC_SYSTEM
      +const eros::System::SubSystem DIAGNOSTIC_SUBSYSTEM
      +const eros::System::Component DIAGNOSTIC_COMPONENT
      +SonarArrayDriverNodeProcess* get_process()
      +bool start()
      +eros::eros_diagnostic::Diagnostic finish_initialization()
      +bool run_loop1()
      +bool run_loop2()
      +bool run_loop3()
      +bool run_001hz()
      +bool run_01hz()
      +bool run_01hz_noisy()
      +bool run_1hz()
      +bool run_10hz()
      +thread_loop()
      +cleanup()
      +bool changenodestate_service(eros::srv_change_nodestate::Request& req, eros::srv_change_nodestate::Response& res)
      +system_commandAction_Callback(const eros::system_commandGoalConstPtr& goal)
      +command_Callback(const eros::command::ConstPtr& t_msg)

      -SonarArrayDriverNodeProcess* process;
  }
  class SonarArrayDriverNodeProcess #Orange {
      +eros::eros_diagnostic::Diagnostic finish_initialization()
      +reset()
      +eros::eros_diagnostic::Diagnostic update(double t_dt, double t_ros_time)
      +std::vector<eros::eros_diagnostic::Diagnostic> new_commandmsg(eros::command msg)
      +std::vector<eros::eros_diagnostic::Diagnostic> check_programvariables()
      +cleanup()
      -ISonarArrayNodeDriver driver

  }
  class ISonarArrayNodeDriver #LimeGreen 
  class SonarArrayNodeDriver #LimeGreen 
  class MockSonarArrayNodeDriver #LimeGreen 
  BaseNode <|-- SonarArrayDriverNode
  BaseNodeProcess <|-- SonarArrayDriverNodeProcess
  SonarArrayDriverNode -> SonarArrayDriverNodeProcess
  SonarArrayDriverNodeProcess --> ISonarArrayNodeDriver
  ISonarArrayNodeDriver <|-- SonarArrayNodeDriver
  ISonarArrayNodeDriver <|-- MockSonarArrayNodeDriver
}
@enduml